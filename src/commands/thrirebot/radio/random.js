import { SlashCommandSubcommandBuilder } from "@discordjs/builders";
import { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } from "@discordjs/voice";

const RADIO_API_BASE = "http://152.53.85.3/json";

async function fetchWithLog(url) {
    console.log(`[RADIO][API] GET: ${url}`);
    const res = await fetch(url);
    return res.json();
}

export default {
    data: new SlashCommandSubcommandBuilder()
        .setName("random")
        .setDescription("Sintoniza uma r√°dio aleat√≥ria de um pa√≠s aleat√≥rio"),

    execute: async ({ interaction }) => {
        await interaction.deferReply();

        const channel = interaction.member.voice.channel;
        if (!channel) {
            return interaction.editReply("Voc√™ precisa estar em um canal de voz para usar este comando.");
        }

        try {
            // üéØ Passo 1: pegar lista de pa√≠ses
            const countries = await fetchWithLog(`${RADIO_API_BASE}/countries`);
            if (!countries.length) {
                return interaction.editReply("‚ùå N√£o foi poss√≠vel obter a lista de pa√≠ses.");
            }

            // üéØ Passo 2: escolher pa√≠s aleat√≥rio
            const country = countries[Math.floor(Math.random() * countries.length)];
            console.log(`[RADIO RANDOM] Pa√≠s selecionado: ${country.name} (${country.iso_3166_1})`);

            // üéØ Passo 3: pegar lista de r√°dios do pa√≠s
            const stations = await fetchWithLog(
                `${RADIO_API_BASE}/stations/bycountrycodeexact/${country.iso_3166_1}?hidebroken=true`
            );
            if (!stations.length) {
                return interaction.editReply(`‚ùå Nenhuma esta√ß√£o encontrada para o pa√≠s ${country.name}.`);
            }

            // üéØ Passo 4: escolher r√°dio aleat√≥ria
            const station = stations[Math.floor(Math.random() * stations.length)];
            console.log(`[RADIO RANDOM] Esta√ß√£o selecionada: ${station.name} - ${station.url_resolved}`);

            // üéØ Passo 5: conectar e tocar
            const connection = joinVoiceChannel({
                channelId: channel.id,
                guildId: channel.guild.id,
                adapterCreator: channel.guild.voiceAdapterCreator
            });

            const player = createAudioPlayer();
            const resource = createAudioResource(station.url_resolved, { inlineVolume: true });

            connection.subscribe(player);
            player.play(resource);

            player.on(AudioPlayerStatus.Playing, () => {
                interaction.editReply(`üé≤ Sintonizando **${station.name}** (${country.name})...`);
            });

            player.on("error", error => {
                console.error("[RADIO RANDOM] Erro no player:", error);
                interaction.followUp("‚ùå Ocorreu um erro ao tentar tocar a r√°dio aleat√≥ria.");
            });

        } catch (err) {
            console.error("[RADIO RANDOM] Erro geral:", err);
            await interaction.editReply("‚ùå Ocorreu um erro ao tentar buscar e tocar a r√°dio aleat√≥ria.");
        }
    }
};
